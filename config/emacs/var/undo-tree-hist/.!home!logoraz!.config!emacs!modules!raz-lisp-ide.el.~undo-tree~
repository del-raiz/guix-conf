(undo-tree-save-format-version . 1)
"2dfb3ee6420c52e8eb314e0c249a8489fe9f59e9"
[nil nil nil nil (26261 58240 357326 64000) 0 nil]
([nil nil ((1128 . 1139) (t 26260 14471 710603 743000)) nil (26261 58240 357325 83000) 0 nil])
([nil nil ((1139 . 1141)) nil (26261 58240 357324 396000) 0 nil])
([nil nil ((1140 . 1144)) nil (26261 58240 357323 985000) 0 nil])
([nil nil ((1144 . 1146)) nil (26261 58240 357323 589000) 0 nil])
([nil nil ((1145 . 1147)) nil (26261 58240 357322 878000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -1146) (undo-tree-id50 . -1) 1147) nil (26261 58240 357322 264000) 0 nil])
([nil nil ((1146 . 1148)) nil (26261 58240 357321 112000) 0 nil])
([nil nil ((1152 . 1163) (1150 . 1150) (1150 . 1152) (1147 . 1147) (1147 . 1150)) nil (26261 58240 357320 465000) 0 nil])
([nil nil ((1163 . 1165)) nil (26261 58240 357319 602000) 0 nil])
([nil nil ((1164 . 1167)) nil (26261 58240 357319 190000) 0 nil])
([nil nil ((#("          ;; Enable development of Nyxt
          ;; Enable with M-- M-x sly RET nyxt-sbcl RET to start the SLY REPL.
          ;; Wait for it to finish and the REPL will open. At this point you are
          ;; almost ready to start hacking. In the SLY REPL, write the following:
          ;; (asdf:load-system :nyxt/gi-gtk)
          ;; (nyxt:start)
          ;; Test with:
          ;; (asdf:test-system :nyxt/gi-gtk)
          ;; Recommended to restart sly session before/after running tests
          (nyxt-sbcl ,(lambda ()
                        (nyxt-make-guix-cl-for-nyxt
                         \"~/common-lisp/nyxt\"
                         :force t
                         :cl-implementation \"sbcl\"
                         :cl-system \"nyxt/gi-gtk\"
                         :no-grafts t
                         :ad-hoc '(\"emacs\" \"xdg-utils\" \"git\"))))" 0 10 (fontified t) 10 13 (face font-lock-comment-delimiter-face fontified t) 13 40 (face font-lock-comment-face fontified t) 40 50 (fontified t) 50 53 (face font-lock-comment-delimiter-face fontified t) 53 118 (face font-lock-comment-face fontified t) 118 128 (fontified t) 128 131 (face font-lock-comment-delimiter-face fontified t) 131 199 (face font-lock-comment-face fontified t) 199 209 (fontified t) 209 212 (face font-lock-comment-delimiter-face fontified t) 212 281 (face font-lock-comment-face fontified t) 281 291 (fontified t) 291 294 (face font-lock-comment-delimiter-face fontified t) 294 325 (face font-lock-comment-face fontified t) 325 326 (face font-lock-comment-face fontified t) 326 336 (fontified t) 336 339 (face font-lock-comment-delimiter-face fontified t) 339 352 (face font-lock-comment-face fontified t) 352 362 (fontified t) 362 365 (face font-lock-comment-delimiter-face fontified t) 365 376 (face font-lock-comment-face fontified t) 376 386 (fontified t) 386 389 (face font-lock-comment-delimiter-face fontified t) 389 421 (face font-lock-comment-face fontified t) 421 431 (fontified t) 431 434 (face font-lock-comment-delimiter-face fontified t) 434 496 (face font-lock-comment-face fontified t) 496 519 (fontified t) 519 525 (face font-lock-keyword-face fontified t) 525 541 (fontified t) 541 568 (fontified t) 568 581 (fontified t) 581 606 (fontified t) 606 626 (face font-lock-string-face fontified t) 626 652 (fontified t) 652 658 (face font-lock-builtin-face fontified t) 658 686 (fontified t) 686 704 (face font-lock-builtin-face fontified t) 704 705 (fontified t) 705 711 (face font-lock-string-face fontified t) 711 737 (fontified t) 737 747 (face font-lock-builtin-face fontified t) 747 748 (fontified t) 748 761 (face font-lock-string-face fontified t) 761 787 (fontified t) 787 797 (face font-lock-builtin-face fontified t) 797 825 (fontified t) 825 832 (face font-lock-builtin-face fontified t) 832 835 (fontified t) 835 842 (face font-lock-string-face fontified t) 842 843 (fontified t) 843 854 (face font-lock-string-face fontified t) 854 855 (fontified t) 855 860 (face font-lock-string-face fontified t) 860 864 (fontified t)) . 1219) (undo-tree-id49 . -864) 2083) nil (26261 58240 357318 684000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1218) (undo-tree-id47 . -1) (undo-tree-id48 . -1) 1219) nil (26261 58240 357317 451000) 0 nil])
([nil nil ((1501 . 1504)) nil (26261 58240 357315 770000) 0 nil])
([nil nil ((1221 . 1224)) nil (26261 58240 357315 378000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1502 . 1503) (nil fontified nil 1494 . 1503) (nil fontified nil 1483 . 1494) (nil fontified nil 1469 . 1483) (nil fontified nil 1455 . 1469) (nil fontified nil 1450 . 1455) (nil fontified nil 1377 . 1450) (nil fontified nil 1375 . 1377) (nil fontified nil 1369 . 1375) (nil fontified nil 1358 . 1369) (nil fontified nil 1352 . 1358) (nil fontified nil 1266 . 1352) (nil fontified nil 1258 . 1266) (nil fontified nil 1233 . 1258) (nil fontified nil 1232 . 1233) (nil fontified nil 1227 . 1232) (nil fontified nil 1224 . 1227) (1224 . 1503)) nil (26261 58240 357314 585000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t ws-butler-chg chg)) . -1224) 1503) nil (26261 58240 357312 971000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-function-name-face fontified t ws-butler-chg chg)) . -1239) (undo-tree-id43 . -1) (#("y" 0 1 (face font-lock-function-name-face fontified t ws-butler-chg chg)) . -1240) (undo-tree-id44 . -1) (#("x" 0 1 (face font-lock-function-name-face fontified t ws-butler-chg chg)) . -1241) (undo-tree-id45 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t ws-butler-chg chg)) . -1242) (undo-tree-id46 . -1) 1243) nil (26261 58240 357312 263000) 0 nil])
([nil nil ((1244 . 1244) (1244 . 1246) (1239 . 1239) (1239 . 1244)) nil (26261 58240 357308 958000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t ws-butler-chg chg)) . -1499) (undo-tree-id42 . -1) 1500) nil (26261 58240 357307 901000) 0 nil])
([nil nil ((1499 . 1500)) nil (26261 58240 357306 794000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1284) (undo-tree-id38 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1285) (undo-tree-id39 . -1) (#("x" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1286) (undo-tree-id40 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1287) (undo-tree-id41 . -1) 1288) nil (26261 58240 357305 714000) 0 nil])
([nil nil ((1284 . 1291)) nil (26261 58240 357302 802000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1321) (undo-tree-id17 . -1) (#("-" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1322) (undo-tree-id18 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1323) (undo-tree-id19 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1324) (undo-tree-id20 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1325) (undo-tree-id21 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1326) (undo-tree-id22 . -1) (#("k" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1327) (undo-tree-id23 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1328) (undo-tree-id24 . -1) (#("N" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1329) (undo-tree-id25 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1330) (undo-tree-id26 . -1) (#("x" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1331) (undo-tree-id27 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1332) (undo-tree-id28 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1333) (undo-tree-id29 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1334) (undo-tree-id30 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1335) (undo-tree-id31 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1336) (undo-tree-id32 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1337) (undo-tree-id33 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1338) (undo-tree-id34 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1339) (undo-tree-id35 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1340) (undo-tree-id36 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1341) (undo-tree-id37 . -1) 1342) nil (26261 58240 357300 848000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1305) (undo-tree-id1 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1306) (undo-tree-id2 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1307) (undo-tree-id3 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1308) (undo-tree-id4 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1309) (undo-tree-id5 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1310) (undo-tree-id6 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1311) (undo-tree-id7 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1312) (undo-tree-id8 . -1) (#("v" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1313) (undo-tree-id9 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1314) (undo-tree-id10 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1315) (undo-tree-id11 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1316) (undo-tree-id12 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1317) (undo-tree-id13 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1318) (undo-tree-id14 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1319) (undo-tree-id15 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1320) (undo-tree-id16 . -1) 1321) nil (26261 58240 357286 151000) 0 nil])
([nil nil ((1305 . 1306)) nil (26261 58240 357274 916000) 0 nil])
([nil nil ((#("6" 0 1 (face font-lock-doc-face fontified t ws-butler-chg chg)) . -1317) (undo-tree-id0 . -1) 1318) nil (26261 58240 357274 236000) 0 nil])
([nil nil ((1317 . 1318)) nil (26261 58240 357260 994000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t ws-butler-chg chg)) . 1752) 1318) nil (26261 58240 357256 474000) 0 nil])
([nil nil ((#("          (clasp (,(executable-find \"clasp\")))" 0 36 (fontified t) 36 43 (face font-lock-string-face fontified t) 43 46 (fontified t)) . 1172) (undo-tree-id71 . -46) (undo-tree-id72 . -46) (undo-tree-id73 . -46) (t 26261 58240 429960 143000)) nil (26261 58264 985139 418000) 0 nil])
([nil nil ((1086 . 1087)) nil (26261 58264 985137 238000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1131 . 1132) (nil fontified nil 1129 . 1132) (nil fontified nil 1122 . 1129) (nil fontified nil 1086 . 1122) (1086 . 1132)) nil (26261 58264 985136 640000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1218) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 1219) nil (26261 58264 985134 863000) 0 nil])
([nil current ((1096 . 1097)) nil (26261 58264 985110 423000) 0 nil])
nil
