#+TITLE: GNU Guix System & Home + StumpWM Configuration
#+subtitle: (defmacro guix-craft (system home &rest body) ...)
#+author: Erik Pablo Almaraz (logoraz)
#+email: erikalmaraz@fastmail.com
:args:
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content indent
#+macro: latest-export-date '(eval (format-time-string "%F %T %z"))'
:end:

* Guix Configuration

  [[file:./assets/home-desktop.png]]

  [[file:./assets/nyxt-desktop-2.png]]

  My personal Guix System & Home StumpWM Configuration!

  I am currently configuring Guix SD for Clasp Common Lisp and Guile Scheme
  development.

  The config directory comprises of those applications/frameworks which I have
  personaly setup (and not all my 'dot files' are therein).
  Currently using a shell script to deploy, but am working on setting up a
  full Guix deployment, however, maintaining original source code rather
  than writting it in Guile as some do.

  This is specifically setup and trailed with my Lenovo ThinkPad X1 Carbon 4th Gen
  (Type 20FB) Laptop.

  Git Repositories:

  - GitHub: https://github.com/logoraz/guix-craft.git

** System Configuration Outline (=system.scm=)

 Define system-level services & packages:
 - 1. =%system-services=
   - Set OpenSSH, CUPs, Screenlocker, and Bluetooth services
   - =guix-home-service-type= -> (TODO would like to handle both concurrently)
   - Modify =%desktop-services= to utilize substitutes where possible
     as opposed to compiling everything...
     See: https://git.savannah.gnu.org/cgit/guix.git/tree/gnu?h=v1.4.0
- 2. =%stumpwm-packages=
  Prefer to keep the WM at the system level to configure basic services
  and to have them available system wide, home can configure StumpWM
  however you like. Also add bluetooth package bluez as its service is
  only available currently at the system level.
  Note that packages are specified only as symbols and not using
  =specifications->packages=.
  - =bluez=
  - =sbcl=
  - =stumpwm+slynk=

** Home Configuration Outline (=home.scm=)

 Define user-level services & packages - note packages are specified as
 symbols, not using =specifications->packages=:
 - 1. =%logoraz-packages= -> My everyday packages (i.e. fonts, web, apps, tools)
 - 2. =%dev-packages= -> Guile/Common Lisp packages I use consistently
 - 3. =%xorg-util-packages= -> X11 packages needed for StumpWM
 - 4. =%stumpwm-packages= -> For StumpWM configuration/customization
 - 4. =%emacs-packages= -> Use Guix to setup Emacs (it's all there!)
 - 5. =services= -> wip (need to modularize to separate variable definitions)
   - =home-environment-variables-service-type=
   - =home-dbus-service-type=
   - =home-pipewire-service-type=
   - =home-bash-service-type=
   - TODO: Implement =home-xdg-configuration-files-service-type=
   - TODO: Implment =home-files-service-type=
   - TODO: Modularize services, i.e. define list outside =home-environment= in variable.

** Channels (=channels.scm=)

Current list of defined channels and whether they are active and/or pinned at a specific
commit:
- Guix
- Nonguix
- guixrus
- flatwhatson
- rde
- benoitj
- TBD

** Manifests (=./config/guix/manifests/=)
- =devtools-manifest.scm=  - Dev Packages in general and for Common Lisp
- =org-docs-manifest.scm=  - Latex packages for Org document generation

I use these manifests as follows for consistent environments with packages I
need without bloating my home configuration:

#+begin_src sh

  $ guix shell -m devtools-manifest.scm -- emacs
  # or
  $ guix shell -m org-docs-manifest.scm -- emacs

#+end_src

** Installation

Basic Instructions on how to install Guix System
*** Live Image/ISO

 I specifically used the guix-installer, but next time my give the
 =guix-live-image= a try... best to have both present for reference.
 Also note that one can use the nonguix images provided on item 3.

 1. https://github.com/SystemCrafters/guix-installer/releases/tag/v202308290335

 2. https://github.com/SystemCrafters/guix-live-image

 3. https://gitlab.com/nonguix/nonguix/-/releases
    - https://gitlab.com/nonguix/nonguix

*** Create usb installation media

For a quick reference on how to create usb installation media:

- List information about block devices (i.e. see what disks you have and find
  your usb)

#+begin_src sh

  $ lsblk

#+end_src

- Create your usb installation media (note: =sdX -> sdb= for me)

#+begin_src sh

  $ sudo dd if=guix-installer-<date number>.iso of=/dev/sdX status=progress=

#+end_src

*** Graphical Installer Procedure

Followed =SystemCrafters= prescription for installation:

- [[https://systemcrafters.net/craft-your-system-with-guix/full-system-install/][systemcrafters:craft-your-own-system-with-guix]]

** Deploy

*** Initial setup/deployment (WIP)

Plan is to configure Home services to deloy, i.e create all necessary locations
and copy configs to their proper locations -> still working on refining this to
follow the =Guix Way=.

#+begin_src sh

  # Get guix home setup
  mkdir ~/repos/
  cd ~/repos
  git clone https://github.com/del-raiz/guix-craft.git
  cd guix-craft/
  # Copy channels.scm to ~/.config/guix
  cp ./channels.scm ~/.config/guix/
  # You can delete you channels.scm and system.scm in /etc/ if still there...
  # that is the default location where they are stored, note that Guix checks
  # ~/.config/guix for channels.scm and if it doesn't exits, it defaults to
  # /etc/channels.scm.

  guix pull
  guix pull --delete-generations
  sudo -E guix system reconfigure system.scm
  sudo guix system delete-generations
  guix home reconfigure home.scm
  guix home delete-generations
  guix upgrade
  guix package --delete-generations
  guix gc
  # guix gc -d1w # delete generations older than 1 week
  df -h

  # Deploy the configuration to ~/.config/
  # Use the deployment scripts in each config module:

  # Setup Guix files
  ./config/guix/deploy-guix.sh

  # Setup StumpWM config files
  ./config/stumpwm/deploy-stumpwm.sh

  # Setup X11 (Xorg) environment files for StumpWM
  ./config/xorg/deploy-xorg.sh

  # Setup Emacs config files
  ./config/emacs/deploy-emacs.sh

  # Setup Nyxt config files
  ./config/nyxt/deploy-nyxt.sh

  # Setup Common Lisp Environment (quicklisp, FFI (WIP), etc.)
  ./config/common-lisp/deploy-cl.sh

#+end_src

*** Connecting to Wifi via CLI

Don't have yet a GUI for managing wifi connections in my StumpWM setup, so
typically connect via command line, and so putting here as a reminder to myself:

#+begin_src sh

  # List Wifi networks available
  $ sudo nmcli device wifi list

  # Connect to ESSID
  $ sudo nmcli device wifi connect <ESSID> password <network-password>

#+end_src

List known connections and delete them from list in Network Manager.

#+begin_src sh

  # Get ESSID (name) or UUID of connection to delete
  $ sudo nmcli connection show

  # Delete connection via ID (aka name or ESSID)
  $ sudo nmcli connection delete <ESSID>

#+end_src

** Common Lisp Stuff

Some Common Lisp stuff I've trialed out in Guix System:
*** Clasp

The Clasp Common Lisp compiler is a project of extreme high interest to
me - Clasp is a new Common Lisp implementation that seamlessly
interoperates with C++ libraries and programs using LLVM for compilation
to native code. See: https://github.com/clasp-developers/clasp

They currently have a guix package recipe that hasn't yet made its way
upstream, as it has a bit complex build model due to git submodules:

I have it currently installed to my .guix-profle, but may resort to
installing it via guix shell only, so as to follow the "Guix way..."

Installation Instructions:

#+begin_src sh

  # Clone to a directory of your choice
  $ git clone https://github.com/clasp-developers/clasp.git \
    ~/repos/builds/clasp/

  $ cd ~/repos/builds/clasp/
  $ guix shell --pure git nss-certs sbcl -- ./koga
  # Note: Koga will error out after downloading the dependencies,
  # when trying to configure clasp.
  $ guix build -f guix/clasp.scm


  # Perhaps install via guix shell for the future
  # one caveat is that it will be removed once you perform guix gc
  # I have not yet trialed the below code:
  $ guix shell -D -f guix/clasp.scm
  # then you can invoke it with whatever program you'd like, say emacs:
  $ guix shell -D -f guix/clasp.scm -- emacs

#+end_src

;;
;;   guix shell -D -f guix/clasp.scm -- COMMAND # Clasp-suitable environment
;;   guix build -f guix/clasp.scm               # Build the package
;;   guix package -f guix/clasp.scm             # Install the package
;;
;; Unfortunately, for now the package and the above commands require the
;; cloned dependencies to be already present, which can be accomplished
;; as follows:
;;
;;   guix shell --pure git nss-certs sbcl -- ./koga
;;
;; though Koga will error out after downloading the dependencies, when
;; trying to configure Clasp.

*** Installing Lem

I created a Guix package recipe for Lem, which can be found [[https://github.com/logoraz/lem-guix-package-recipe][here]], clone and install with
Guix via:

#+begin_src sh

  $ guix package -f path/to/lem-guix-packaging/package.scm

#+end_src

*Note:* I no longer plan to contribute to Lem due to their distasteful ethics towards
Common Lisp newcomers and Guix users. A few rude, pompous contributors to the
project and their interactions with me on DM's is what lead to this... Not sure if I will update this package recipe any longer knowing it will contribute to that negative
social environment.
My Lem config is kept in the archive directory of this repo.


* StumpWM Configuration

My personal StumpWM configuration - I prefer to follow the XDG-style configuration, as
prescribed on https://github.com/stumpwm/stumpwm/wiki/Customize. I like things modular,
so it is set up as such.

** Initialization File:  =~/.config/stumpwm/config=

Loads in modules and set's up core features, such as my X11 environment.

** Modules: =~/.config/stumpwm/modules/*=

These probably aren't qualified to be called modules, but they are akin to stand-alone
common-lisp scripts, they currently have a predefined order to be called in StumpWM
config.lisp -> config.
- =auto-start= - Setup X11 environment & controls
- =colors= - Define color pallet for StumpWM
- =syntax= - Helper Functions, and Macros for StumpWM (wip)
- =frames= - Frame/Window configurations
- =keybindings= - The heart and sole of the StumpWM configuration
- =modeline= - Setup & customize StumpWM modeline
- =theme= - Set appearance/style of StumpWM
- =utilities= - Utility packages/libraries, ad-hoc customizations & commands.

** Libraries: =~/.config/stumpwm/libraries/*=

These are personally developed StumpWM CL packages, to be loaded similarily to
StumpWM-Contrib packages:
- =stumpwm-wpctl= - converted to package/library
  - A fork of https://github.com/Junker/stumpwm-wpctl
- =bluetooth= - converted to a package/library
  - Borrowed from https://config.phundrak.com/stumpwm#bluetooth
- =stump-nmctl= - TODO: make a CL interface to nmcli for StumpWM

** Contrib: =~/.config/stumpwm/contrib/*= or guix-location

These are the =stumpwm-contrib= packages that I am currently using, most through Guix,
but a few I needed to git clone and add to load path:
- stumpwm-contrib/util:
  - =end-session=: configured/loaded in "config.lisp"
  - =swm-gaps=: configured/loaded in "frames.lisp"
  - =kbd-layouts=: configured/loaded in "keybindings.lisp"
  - =ttf-fonts=: configured/loaded in "theme.lisp"
  - =global-windows= - configured/loaded in "config.lisp"
  - =screenshoot=: configured/loaded in "utilities.lisp"
- stumpwm-contrib/modeline:
  - =cpu=: configured/loaded in "modeline.lisp"
  - =mem=: configured/loaded in "modeline.lisp"
  - =wifi=: configured/loaded in "modeline.lisp"
  - =battery-portable=: configured/loaded in "modeline.lisp"


* References


1. Guix System Installation & Home Configurations:

   - https://systemcrafters.net/craft-your-system-with-guix/full-system-install/

   - https://github.com/iambumblehead/guix-home

2. StumpWM Configurations & Hacks:

    - https://config.phundrak.com/stumpwm

    - https://github.com/herbertjones/my-stumpwm-config


    - https://mail.gnu.org/archive/html/bug-guix/2023-04/msg00227.html
      - Believe this has since been corrected in Guix upstream.

3. Nyxt Configuration

   - https://nyxt.atlas.engineer/documentation

   - https://www.youtube.com/@nyxt-browser

4. Emacs & Guix

    - https://www.youtube.com/@systemcrafters

5. Xorg Response Lag solution

    - https://gitlab.com/nonguix/nonguix/-/issues/212

